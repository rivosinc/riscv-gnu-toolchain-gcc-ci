# syntax=docker/dockerfile:1

# This dockerfile approximates the multi-stage pipeline and allows us to test
# changes before pushing.

ARG MODE=newlib
ARG TARGET=rv32gc-ilp32d
ARG GCCHASH=bed993884b149851fe930b43cf11cbcdf05f1578
ARG MULTILIB=non-multilib

FROM ubuntu:22.04 as get-sources
ARG GCCHASH
RUN apt update
RUN apt install git -y
RUN git clone https://github.com/rivosinc/riscv-gnu-toolchain-gcc-ci.git tc
RUN cd tc && git submodule update --init --recursive binutils
RUN cd tc && git submodule update --init --recursive dejagnu
RUN cd tc && git submodule update --init --recursive gdb
RUN cd tc && git submodule update --init --recursive glibc
RUN cd tc && git submodule update --init --recursive newlib
RUN cd tc && git submodule update --init --recursive qemu
RUN cd tc && rm -rf gcc
RUN cd tc && git clone git://gcc.gnu.org/git/gcc.git && cd gcc && git checkout ${GCCHASH}
RUN apt install zip -y
RUN cd tc && zip -r cache.zip .git binutils dejagnu gcc gdb glibc newlib qemu

FROM scratch as just-sources
COPY --from=get-sources tc/cache.zip cache.zip

FROM ubuntu:22.04 as build
ARG MODE
ARG TARGET
ARG MULTILIB
RUN apt update
RUN apt install git -y
RUN git clone https://github.com/rivosinc/riscv-gnu-toolchain-gcc-ci.git tc
RUN cd tc && rm -rf rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
COPY out/cache.zip tc/cache.zip
RUN apt install unzip -y
RUN cd tc && unzip cache.zip
RUN cd tc && rm cache.zip
RUN DEBIAN_FRONTEND=noninteractive ./tc/.github/setup-apt.sh
RUN cd tc && mkdir build
COPY configure.sh configure.sh
RUN chmod u+x /configure.sh && /configure.sh "$MULTILIB" "$TARGET"
RUN cat tc/build/Makefile
RUN cd tc && cd build && make newlib -j32
# Free up disk space
RUN cd tc && rm -rf .git binutils dejagnu gcc gdb glibc musl newlib pk qemu
# Zip artifact
RUN apt install zip -y
RUN cd tc && zip --symlinks -r stage2.zip build
RUN rm -rf tc/build

FROM scratch as just-build
COPY --from=build tc/stage2.zip stage2.zip

FROM ubuntu:22.04 as test
ARG MODE
ARG TARGET
ARG MULTILIB
RUN apt update
RUN apt install git -y
RUN git clone https://github.com/rivosinc/riscv-gnu-toolchain-gcc-ci.git tc
RUN cd tc && rm -rf rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
COPY out/cache.zip tc/cache.zip
RUN apt install unzip -y
RUN cd tc && unzip cache.zip
RUN cd tc && rm cache.zip
RUN DEBIAN_FRONTEND=noninteractive ./tc/.github/setup-apt.sh
RUN cd tc && mkdir build
COPY configure.sh configure.sh
RUN chmod u+x /configure.sh && /configure.sh "$MULTILIB" "$TARGET"
COPY out/stage2.zip tc/stage2.zip
RUN cd tc && unzip -n stage2.zip
# Fake stamps
RUN cd tc && mkdir -p build/stamps
RUN cd tc && cd build/stamps && \
	touch -d "+2 days" check-write-permission && \
	touch -d "+2 days" build-gdb-${MODE} && \
	touch -d "+2 days" build-binutils-${MODE} && \
	touch -d "+2 days" build-linux-headers && \
	touch -d "+2 days" build-gcc-${MODE}-stage1 && \
	touch -d "+2 days" build-glibc-linux-headers && \
	touch -d "+2 days" build-glibc-linux-rv32gc-ilp32d && \
	touch -d "+2 days" build-glibc-linux-rv32imac-ilp32 && \
	touch -d "+2 days" build-glibc-linux-rv32imafdc-ilp32d && \
	touch -d "+2 days" build-glibc-linux-rv32gcv-ilp32d && \
	touch -d "+2 days" build-glibc-linux-rv32gc_zba_zbb_zbc_zbs-ilp32d && \
	touch -d "+2 days" build-glibc-linux-rv32gcv_zvbb_zvbc_zvkg_zvkn_zvknc_zvkned_zvkng_zvknha_zvknhb_zvks_zvksc_zvksed_zvksg_zvksh_zvkt-ilp32d && \
	touch -d "+2 days" build-glibc-linux-rv64gc-lp64d && \
	touch -d "+2 days" build-glibc-linux-rv64imac-lp64 && \
	touch -d "+2 days" build-glibc-linux-rv64imafdc-lp64d && \
	touch -d "+2 days" build-glibc-linux-rv64gcv-lp64d && \
	touch -d "+2 days" build-glibc-linux-rv64gc_zba_zbb_zbc_zbs-lp64d && \
	touch -d "+2 days" build-glibc-linux-rv64gcv_zvbb_zvbc_zvkg_zvkn_zvknc_zvkned_zvkng_zvknha_zvknhb_zvks_zvksc_zvksed_zvksg_zvksh_zvkt-lp64d && \
	touch -d "+2 days" build-glibc-linux-rv64imafdcv_zicond_zawrs_zbc_zvkng_zvksg_zvbb_zvbc_zicsr_zba_zbb_zbs_zicbom_zicbop_zicboz_zfhmin_zkt-lp64d && \
	touch -d "+2 days" build-newlib-nano && \
	touch -d "+2 days" build-${MODE} && \
	touch -d "+2 days" merge-newlib-nano && \
	touch -d "+2 days" build-gcc-${MODE}-stage2
# Sanity check
RUN cd tc && cd build && make ${MODE}

RUN apt install python3 -y
RUN apt install python-is-python3 -y

# CMD cd tc && cd build && RUNTESTFLAGS="-v -v" make report-newlib -j32
RUN cd tc && cd build && cd build-gcc-newlib-stage2 && make install
RUN cd tc && cd build && make report-${MODE} -j32 || true

COPY testsuite.sh testsuite.sh
RUN chmod u+x /testsuite.sh && /testsuite.sh "$TARGET" > testsuite.log

FROM scratch as just-test
COPY --from=test testsuite.log testsuite.log
